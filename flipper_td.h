#ifndef FLIPPER_TD_H
#define FLIPPER_TD_H

#include <furi.h>
#include <gui/gui.h>
#include <input/input.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <math.h>

/* generated by fbt from .png files in images folder */
#include <flipper_td_icons.h>

//================================================================
// Constants
//================================================================
#define SCREEN_WIDTH      128
#define SCREEN_HEIGHT     64
#define STATUS_BAR_HEIGHT 8
#define CELL_SIZE         8
#define GRID_WIDTH        (SCREEN_WIDTH / CELL_SIZE)
#define GRID_HEIGHT       ((SCREEN_HEIGHT - STATUS_BAR_HEIGHT) / CELL_SIZE)
#define MAX_ENEMIES       32
#define MAX_PROJECTILES   64
#define PROJECTILE_SPEED  2.0f
#define PRE_WAVE_TICKS    150

//================================================================
// Type Definitions
//================================================================

// Forward declare GameState for use in function prototypes
typedef struct GameState GameState;

// Event types for the message queue
typedef enum {
    EventTypeTick,
    EventTypeKey,
} EventType;

// Tower types
typedef enum {
    TOWER_NONE,
    TOWER_NORMAL,
    TOWER_RANGE,
    TOWER_SPLASH,
    TOWER_FREEZE,
} TowerType;

// Simple coordinate struct
typedef struct {
    int x;
    int y;
} Coord;

// Parameters for scaling enemy properties per wave
typedef struct {
    int wave_number;
    float enemy_speed;
    int enemy_hp;
    int enemy_count;
    int spawn_interval_ticks;
} Wave;

// Projectile state
typedef struct {
    float x;
    float y;
    float vx;
    float vy;
    int damage;
    TowerType tower_type;
    bool active;
} Projectile;

// Enemy state
typedef struct {
    Coord pos;
    int hp;
    int path_index;
    float progress;
    int freeze_timer;
    bool active;
} Enemy;

// Event structure passed in the message queue
typedef struct {
    EventType type;
    InputEvent input;
} PluginEvent;

// Game state containing all runtime data
struct GameState {
    int lives;
    int gold;
    int wave;
    TowerType grid[GRID_WIDTH][GRID_HEIGHT];
    Coord cursor;
    Enemy enemies[MAX_ENEMIES];
    Projectile projectiles[MAX_PROJECTILES];
    int pre_wave_timer;
    int wave_spawn_timer;
    int wave_spawn_index;
};

//================================================================
// Function Prototypes
//================================================================

// Wave logic
Wave get_wave_params(int wave_number);
void spawn_wave(GameState* game);
bool all_enemies_inactive(GameState* game);

// Tower logic
TowerType next_tower_type(TowerType current);
void update_tower_firing(GameState* game);

// Enemy logic
void update_enemies(GameState* game);

// Projectile logic
void spawn_projectile(GameState* game, int tx, int ty, TowerType type, Coord target);
void update_projectiles(GameState* game);

// Pathfinding
bool find_path(GameState* game, Coord start, Coord end, Coord path[], int* path_length);

// Main game loop and state management
void init_game_state(GameState* game);
void draw_game(Canvas* canvas, GameState* game);
int32_t flipper_td_app(void* p);

#endif // FLIPPER_TD_H